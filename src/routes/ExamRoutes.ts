import express from 'express'
import { ExamController } from '@/controllers/ExamController.js'

const router = express.Router()

/**
 * @route   POST /exams
 * @desc    Create a new exam
 * @access  Private (Admin/Teacher)
 */
router.post('/', ExamController.createExam)

/**
 * @route   GET /exams
 * @desc    Fetch all exams
 * @access  Public/Private (Admin/Teacher)
 */
router.get('/', ExamController.getAllExams)

/**
 * @route   GET /exams/:id
 * @desc    Fetch an exam by ID
 * @access  Public/Private (Admin/Teacher)
 */
router.get('/:id', ExamController.getExamById)

/**
 * @route   PUT /exams/:id
 * @desc    Update an exam
 * @access  Private (Admin/Teacher)
 */
router.put('/:id', ExamController.updateExam)

/**
 * @route   DELETE /exams/:id
 * @desc    Delete an exam
 * @access  Private (Admin/Teacher)
 */
router.delete('/:id', ExamController.deleteExam)

export default router

/* --------------------------------------------------------------------------
     Swagger/OpenAPI Documentation
     ---------------------------------------------------------------------------
  
     The documentation below provides complete details for each exam route.
     New endpoints can be added following this format.
  
     The examples provided below adhere to OpenAPI 3.0 standards and can be
     automatically generated by tools like swagger-jsdoc.
  
  --------------------------------------------------------------------------- */

/**
 * @swagger
 * tags:
 *   - name: Exams
 *     description: API endpoints for managing exams.
 */

/**
 * @swagger
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *   schemas:
 *     Exam:
 *       type: object
 *       properties:
 *         id:
 *           type: number
 *         title:
 *           type: string
 *         date:
 *           type: string
 *           format: date
 *         description:
 *           type: string
 *       required:
 *         - title
 *         - date
 *     ExamResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *         data:
 *           $ref: '#/components/schemas/Exam'
 *         message:
 *           type: string
 *     ErrorResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *           default: false
 *         message:
 *           type: string
 *
 */

/**
 * @swagger
 * /exams:
 *   post:
 *     summary: Create a new exam
 *     tags:
 *       - Exams
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       description: Exam creation data
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Exam'
 *           examples:
 *             exam:
 *               summary: Exam creation payload
 *               value:
 *                 title: "Midterm Exam"
 *                 date: "2023-07-15"
 *                 description: "Midterm examination for 10th grade students"
 *     responses:
 *       201:
 *         description: Exam created successfully.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ExamResponse'
 *       400:
 *         description: Invalid input data.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */

/**
 * @swagger
 * /exams:
 *   get:
 *     summary: Fetch all exams
 *     tags:
 *       - Exams
 *     responses:
 *       200:
 *         description: List of exams retrieved successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Exam'
 *       500:
 *         description: Server error retrieving exams.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */

/**
 * @swagger
 * /exams/{id}:
 *   get:
 *     summary: Fetch an exam by ID
 *     tags:
 *       - Exams
 *     parameters:
 *       - in: path
 *         name: id
 *         description: Numeric ID of the exam to fetch
 *         required: true
 *         schema:
 *           type: number
 *     responses:
 *       200:
 *         description: Exam retrieved successfully.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Exam'
 *       400:
 *         description: Invalid exam ID.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       404:
 *         description: Exam not found.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */

/**
 * @swagger
 * /exams/{id}:
 *   put:
 *     summary: Update an exam
 *     tags:
 *       - Exams
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         description: Numeric ID of the exam to update
 *         required: true
 *         schema:
 *           type: number
 *     requestBody:
 *       description: Updated exam data
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Exam'
 *           examples:
 *             exam:
 *               summary: Updated exam payload
 *               value:
 *                 title: "Updated Midterm Exam"
 *                 date: "2023-07-20"
 *                 description: "Updated information for midterm exam"
 *     responses:
 *       200:
 *         description: Exam updated successfully.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Exam'
 *       400:
 *         description: Invalid exam ID or input data.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       404:
 *         description: Exam not found.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */

/**
 * @swagger
 * /exams/{id}:
 *   delete:
 *     summary: Delete an exam
 *     tags:
 *       - Exams
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         description: Numeric ID of the exam to delete
 *         required: true
 *         schema:
 *           type: number
 *     responses:
 *       204:
 *         description: Exam deleted successfully. No content returned.
 *       400:
 *         description: Invalid exam ID.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 *       404:
 *         description: Exam not found.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ErrorResponse'
 */
