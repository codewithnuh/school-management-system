openapi: 3.0.0
info:
  title: School Management System API
  version: 1.0.0
  description: API documentation for School Management System
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.production.com
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        internal_code:
          type: string
security:
  - bearerAuth: []
paths:
  /api/classes:
    post:
      tags:
        - Classes
      summary: Create a new class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '201':
          description: Class created successfully
    get:
      tags:
        - Classes
      summary: Get all classes
      responses:
        '200':
          description: List of all classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
  /api/classes/{id}:
    get:
      tags:
        - Classes
      summary: Get a class by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Class found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '404':
          description: Class not found
    put:
      tags:
        - Classes
      summary: Update a class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '200':
          description: Class updated successfully
        '404':
          description: Class not found
    delete:
      tags:
        - Classes
      summary: Delete a class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Class deleted successfully
        '404':
          description: Class not found
  /sections:
    post:
      tags:
        - Sections
      summary: Create a new section
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                classId:
                  type: string
      responses:
        '201':
          description: Section created successfully
        '400':
          description: Invalid request body
  /sections/class/{classId}:
    get:
      tags:
        - Sections
      summary: Get all sections for a class
      parameters:
        - in: path
          name: classId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of sections
        '404':
          description: Class not found
  /sections/{id}:
    get:
      tags:
        - Sections
      summary: Get section by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Section details
        '404':
          description: Section not found
    put:
      tags:
        - Sections
      summary: Update a section
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                classId:
                  type: string
      responses:
        '200':
          description: Section updated successfully
        '404':
          description: Section not found
    delete:
      tags:
        - Sections
      summary: Delete a section
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Section deleted successfully
        '404':
          description: Section not found
  /teachers:
    get:
      summary: Get all teachers
      tags:
        - Teachers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum:
              - active
              - pending
              - rejected
          description: Filter teachers by status
      responses:
        '200':
          description: List of teachers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    email:
                      type: string
                    subject:
                      type: string
                    status:
                      type: string
                    qualifications:
                      type: array
                      items:
                        type: string
        '401':
          description: Unauthorized
  /teachers/register:
    post:
      summary: Register a new teacher
      tags:
        - Teachers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - subject
                - qualifications
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                subject:
                  type: string
                qualifications:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Teacher registration submitted successfully
        '400':
          description: Invalid input
  /teachers/{id}:
    get:
      summary: Get teacher by ID
      tags:
        - Teachers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Teacher ID
      responses:
        '200':
          description: Teacher details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  subject:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Teacher not found
  /teachers/accept:
    post:
      summary: Accept a teacher application
      tags:
        - Teachers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - teacherId
              properties:
                teacherId:
                  type: string
      responses:
        '200':
          description: Teacher application accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: Teacher not found
  /teachers/reject:
    post:
      summary: Reject a teacher application
      tags:
        - Teachers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - teacherId
                - reason
              properties:
                teacherId:
                  type: string
                reason:
                  type: string
      responses:
        '200':
          description: Teacher application rejected successfully
        '401':
          description: Unauthorized
        '404':
          description: Teacher not found
  /teachers/interview:
    post:
      summary: Schedule an interview for a teacher applicant
      tags:
        - Teachers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - teacherId
                - interviewDate
              properties:
                teacherId:
                  type: string
                interviewDate:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '200':
          description: Interview scheduled successfully
        '401':
          description: Unauthorized
        '404':
          description: Teacher not found
  /time-slots:
    post:
      tags:
        - Time Slots
      summary: Create time slots for a class
      description: Creates one or more time slots for a specific class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                classId:
                  type: string
                  description: ID of the class
                slots:
                  type: array
                  items:
                    type: object
                    properties:
                      startTime:
                        type: string
                        format: date-time
                      endTime:
                        type: string
                        format: date-time
      responses:
        '201':
          description: Time slots created successfully
        '400':
          description: Invalid request body
        '500':
          description: Server error
  /time-slots/{id}:
    put:
      tags:
        - Time Slots
      summary: Update a time slot
      description: Updates an existing time slot by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Time slot ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Time slot updated successfully
        '404':
          description: Time slot not found
        '500':
          description: Server error
    delete:
      tags:
        - Time Slots
      summary: Delete a time slot
      description: Deletes an existing time slot by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Time slot ID
      responses:
        '204':
          description: Time slot deleted successfully
        '404':
          description: Time slot not found
        '500':
          description: Server error
  /timetable/generate/{classid}:
    post:
      tags:
        - Timetable
      summary: Generate a new timetable for a class
      description: Generates and saves a new timetable schedule for the specified class ID
      parameters:
        - in: path
          name: classid
          required: true
          schema:
            type: string
          description: The ID of the class to generate timetable for
      responses:
        '200':
          description: Timetable generated successfully
        '400':
          description: Invalid input parameters
        '500':
          description: Server error while generating timetable
  /timetable/{classId}/{sectionId}:
    get:
      tags:
        - Timetable
      summary: Get timetable for a class section
      description: Retrieves the timetable schedule for the specified class and section
      parameters:
        - in: path
          name: classId
          required: true
          schema:
            type: string
          description: The ID of the class
        - in: path
          name: sectionId
          required: true
          schema:
            type: string
          description: The ID of the section
      responses:
        '200':
          description: Returns the timetable data
        '404':
          description: Timetable not found
        '500':
          description: Server error while fetching timetable
  /timetable/teacher/{teacherId}:
    get:
      tags:
        - Timetable
      summary: Get timetable for a teacher
      description: Retrieves the timetable schedule for the specified teacher
      parameters:
        - in: path
          name: teacherId
          required: true
          schema:
            type: string
          description: The ID of the teacher
      responses:
        '200':
          description: Returns the teacher's timetable data
        '404':
          description: Timetable not found
        '500':
          description: Server error while fetching timetable
  /timetable/weekly/{classId}/{sectionId}:
    get:
      tags:
        - Timetable
      summary: Get weekly timetable for a class section
      description: Retrieves the weekly timetable schedule for the specified class and section
      parameters:
        - in: path
          name: classId
          required: true
          schema:
            type: string
          description: The ID of the class
        - in: path
          name: sectionId
          required: true
          schema:
            type: string
          description: The ID of the section
      responses:
        '200':
          description: Returns the weekly timetable data
        '404':
          description: Timetable not found
        '500':
          description: Server error while fetching timetable
  /timetable/weekly/{classId}/teacher/{teacherId}:
    get:
      tags:
        - Timetable
      summary: Get weekly timetable for a teacher in a class
      description: Retrieves the weekly timetable schedule for the specified teacher in a class
      parameters:
        - in: path
          name: classId
          required: true
          schema:
            type: string
          description: The ID of the class
        - in: path
          name: teacherId
          required: true
          schema:
            type: string
          description: The ID of the teacher
      responses:
        '200':
          description: Returns the weekly timetable data
        '404':
          description: Timetable not found
        '500':
          description: Server error while fetching timetable
  /users:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - role
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum:
                    - student
                    - teacher
                    - admin
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
        '401':
          description: Unauthorized
    delete:
      summary: Delete a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /users/accept-user:
    post:
      summary: Accept a user application
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: User application accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /users/auth/reset-token:
    patch:
      summary: Reset user password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
                - newPassword
              properties:
                email:
                  type: string
                  format: email
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid token or request
        '404':
          description: User not found
  /users/auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials
  /users/auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized
tags:
  - name: Sections
    description: Section management endpoints
